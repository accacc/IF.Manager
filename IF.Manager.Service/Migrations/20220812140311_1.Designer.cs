// <auto-generated />
using System;
using IF.Manager.Persistence.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IF.Manager.Service.Migrations
{
    [DbContext(typeof(ManagerDbContext))]
    [Migration("20220812140311_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommandGetType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IFClassMapperId")
                        .HasColumnType("int");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQueryOverride")
                        .HasColumnType("bit");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IFClassMapperId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProcessId");

                    b.ToTable("IFCommand");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFCommandFilterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommandId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionOperator")
                        .HasColumnType("int");

                    b.Property<int>("EntityPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("FilterOperator")
                        .HasColumnType("int");

                    b.Property<int?>("FormModelPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("IFEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.HasIndex("EntityPropertyId");

                    b.HasIndex("IFEntityId");

                    b.ToTable("IFCommandFilterItem");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("IFEntity");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFEntityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IFEntityGroup");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFEntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAudited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMultiLanguage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("IFEntityProperty");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFEntityRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ForeignKeyIFEntityPropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDbFirst")
                        .HasColumnType("bit");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ForeignKeyIFEntityPropertyId");

                    b.HasIndex("RelationId");

                    b.ToTable("IFEntityRelation");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFLanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityPropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IFLanguageEntity");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("IFModel");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFModelProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityPropertyId");

                    b.HasIndex("ModelId");

                    b.ToTable("IFModelProperty");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageActionRouteValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IFModelPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("IFPageActionId")
                        .HasColumnType("int");

                    b.Property<int>("IFPageParameterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IFModelPropertyId");

                    b.HasIndex("IFPageActionId");

                    b.HasIndex("IFPageParameterId");

                    b.ToTable("IFPageActionRouteValue");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlType")
                        .HasColumnType("int");

                    b.Property<string>("CssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IFPageControlMapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IFPageControl");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IFPageControl");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageControlItemModelProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IFModelPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("IFPageFormItemId")
                        .HasColumnType("int");

                    b.Property<int?>("IFQueryId")
                        .HasColumnType("int");

                    b.Property<int?>("NameIFModelPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int?>("ValueIFModelPropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IFModelPropertyId");

                    b.HasIndex("IFPageFormItemId");

                    b.HasIndex("IFQueryId");

                    b.HasIndex("NameIFModelPropertyId");

                    b.HasIndex("ObjectId");

                    b.HasIndex("ValueIFModelPropertyId");

                    b.ToTable("IFPageControlItemModelProperty");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageControlMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IFPageControlId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IFPageControlId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("IFPageControlMap");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageFormItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IFPageFormItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Textbox",
                            Name = "Textbox"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Datepicker",
                            Name = "Datepicker"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Checkbox",
                            Name = "Checkbox"
                        },
                        new
                        {
                            Id = 4,
                            Description = "DropDown",
                            Name = "DropDown"
                        },
                        new
                        {
                            Id = 5,
                            Description = "MultipleSelect",
                            Name = "MultipleSelect"
                        });
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageFormLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IFPageFormLayout");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Standart",
                            Name = "Standart"
                        });
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageGridLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.ToTable("IFPageGridLayout");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Grid Layout",
                            LayoutId = 1,
                            Name = "Grid Layout"
                        });
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColumSize")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IFPageLayout");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColumSize = 2,
                            Description = "Two Column",
                            Name = "Two Column"
                        });
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("IFPageParameter");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("IFProcess");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("int");

                    b.Property<bool>("CommandAudit")
                        .HasColumnType("bit");

                    b.Property<bool>("CommandErrorHandler")
                        .HasColumnType("bit");

                    b.Property<bool>("CommandPerformanceCounter")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAuthenticationAdded")
                        .HasColumnType("bit");

                    b.Property<int>("JsonAppType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.Property<bool>("QueryAudit")
                        .HasColumnType("bit");

                    b.Property<bool>("QueryErrorHandler")
                        .HasColumnType("bit");

                    b.Property<bool>("QueryPerformanceCounter")
                        .HasColumnType("bit");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int");

                    b.Property<string>("SystemDbConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemDbType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("IFProject");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPublish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SolutionId");

                    b.ToTable("IFPublish");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsQueryOverride")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PageSize")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("QueryGetType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProcessId");

                    b.ToTable("IFQuery");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFQueryFilterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditionOperator")
                        .HasColumnType("int");

                    b.Property<int>("EntityPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("FilterOperator")
                        .HasColumnType("int");

                    b.Property<int?>("FormModelPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("IFEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("IFPageParameterId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsNullCheck")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityPropertyId");

                    b.HasIndex("IFEntityId");

                    b.HasIndex("IFPageParameterId");

                    b.HasIndex("ParentId");

                    b.HasIndex("QueryId");

                    b.ToTable("IFQueryFilterItem");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFQueryOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<int>("QueryOrderOperator")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityPropertyId");

                    b.HasIndex("QueryId");

                    b.ToTable("IFQueryOrder");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IFSolution");
                });

            modelBuilder.Entity("IF.Manager.Service.Model.IFClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimitive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("IFClass");
                });

            modelBuilder.Entity("IF.Manager.Service.Model.IFClassMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IFClassId")
                        .HasColumnType("int");

                    b.Property<int?>("IFModelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IFClassId");

                    b.HasIndex("IFModelId");

                    b.ToTable("IFClassMapper");
                });

            modelBuilder.Entity("IF.Manager.Service.Model.IFClassMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FromPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("IFClassMapperId")
                        .HasColumnType("int");

                    b.Property<int?>("ToPropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPropertyId");

                    b.HasIndex("IFClassMapperId");

                    b.HasIndex("ToPropertyId");

                    b.ToTable("IFClassMapping");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPage", b =>
                {
                    b.HasBaseType("IF.Manager.Contracts.Model.IFPageControl");

                    b.Property<int?>("IFProjectId")
                        .HasColumnType("int");

                    b.Property<int>("PageLayoutId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.HasIndex("IFProjectId");

                    b.HasIndex("PageLayoutId");

                    b.HasIndex("ProcessId");

                    b.HasDiscriminator().HasValue("IFPage");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageAction", b =>
                {
                    b.HasBaseType("IF.Manager.Contracts.Model.IFPageControl");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int?>("CommandId")
                        .HasColumnType("int");

                    b.Property<int?>("IFModelId")
                        .HasColumnType("int");

                    b.Property<int?>("IFPageControlId")
                        .HasColumnType("int");

                    b.Property<int?>("QueryId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WidgetRenderType")
                        .HasColumnType("int");

                    b.Property<int>("WidgetType")
                        .HasColumnType("int");

                    b.HasIndex("CommandId");

                    b.HasIndex("IFModelId");

                    b.HasIndex("IFPageControlId");

                    b.HasIndex("QueryId");

                    b.HasDiscriminator().HasValue("IFPageAction");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageForm", b =>
                {
                    b.HasBaseType("IF.Manager.Contracts.Model.IFPageControl");

                    b.Property<int>("FormLayoutId")
                        .HasColumnType("int");

                    b.Property<int?>("IFModelId")
                        .HasColumnName("IFPageForm_IFModelId")
                        .HasColumnType("int");

                    b.Property<int?>("IFQueryId")
                        .HasColumnType("int");

                    b.HasIndex("FormLayoutId");

                    b.HasIndex("IFModelId");

                    b.HasIndex("IFQueryId");

                    b.HasDiscriminator().HasValue("IFPageForm");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageGrid", b =>
                {
                    b.HasBaseType("IF.Manager.Contracts.Model.IFPageControl");

                    b.Property<int?>("GridLayoutId")
                        .HasColumnType("int");

                    b.Property<int?>("IFFilterPageFormId")
                        .HasColumnType("int");

                    b.Property<int?>("QueryId")
                        .HasColumnName("IFPageGrid_QueryId")
                        .HasColumnType("int");

                    b.HasIndex("GridLayoutId");

                    b.HasIndex("IFFilterPageFormId");

                    b.HasIndex("QueryId");

                    b.HasDiscriminator().HasValue("IFPageGrid");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageListView", b =>
                {
                    b.HasBaseType("IF.Manager.Contracts.Model.IFPageControl");

                    b.Property<int>("FormLayoutId")
                        .HasColumnName("IFPageListView_FormLayoutId")
                        .HasColumnType("int");

                    b.Property<int?>("IFQueryId")
                        .HasColumnName("IFPageListView_IFQueryId")
                        .HasColumnType("int");

                    b.HasIndex("FormLayoutId");

                    b.HasIndex("IFQueryId");

                    b.HasDiscriminator().HasValue("IFPageListView");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageNavigation", b =>
                {
                    b.HasBaseType("IF.Manager.Contracts.Model.IFPageControl");

                    b.Property<int>("IFProjectId")
                        .HasColumnName("IFPageNavigation_IFProjectId")
                        .HasColumnType("int");

                    b.HasIndex("IFProjectId");

                    b.HasDiscriminator().HasValue("IFPageNavigation");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPagePanel", b =>
                {
                    b.HasBaseType("IF.Manager.Contracts.Model.IFPageControl");

                    b.HasDiscriminator().HasValue("IFPagePanel");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFCommand", b =>
                {
                    b.HasOne("IF.Manager.Service.Model.IFClassMapper", "IFClassMapper")
                        .WithMany()
                        .HasForeignKey("IFClassMapperId");

                    b.HasOne("IF.Manager.Contracts.Model.IFModel", "Model")
                        .WithMany("Commands")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFCommand", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFProcess", "Process")
                        .WithMany("Commands")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFCommandFilterItem", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFCommand", "Command")
                        .WithMany("CommandFilterItems")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFEntityProperty", "EntityProperty")
                        .WithMany("CommandFilterItems")
                        .HasForeignKey("EntityPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFEntity", null)
                        .WithMany("CommandFilterItems")
                        .HasForeignKey("IFEntityId");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFEntity", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFEntityGroup", "Group")
                        .WithMany("Entities")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFEntityProperty", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFEntity", "Entity")
                        .WithMany("Properties")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFEntityRelation", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFEntity", "Entity")
                        .WithMany("Relations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFEntityProperty", "ForeignKeyIFEntityProperty")
                        .WithMany()
                        .HasForeignKey("ForeignKeyIFEntityPropertyId");

                    b.HasOne("IF.Manager.Contracts.Model.IFEntity", "Relation")
                        .WithMany("ReverseRelations")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFModel", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFEntity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFModelProperty", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFEntity", "Entity")
                        .WithMany("ModelProperties")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFEntityProperty", "EntityProperty")
                        .WithMany("ModelProperties")
                        .HasForeignKey("EntityPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFModel", "Model")
                        .WithMany("Properties")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageActionRouteValue", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFModelProperty", "IFModelProperty")
                        .WithMany()
                        .HasForeignKey("IFModelPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFPageAction", "IFPageAction")
                        .WithMany("IFPageActionRouteValues")
                        .HasForeignKey("IFPageActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFPageParameter", "IFPageParameter")
                        .WithMany()
                        .HasForeignKey("IFPageParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageControlItemModelProperty", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFModelProperty", "IFModelProperty")
                        .WithMany()
                        .HasForeignKey("IFModelPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFPageFormItem", "IFPageFormItem")
                        .WithMany("ModelProperties")
                        .HasForeignKey("IFPageFormItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFQuery", "IFQuery")
                        .WithMany()
                        .HasForeignKey("IFQueryId");

                    b.HasOne("IF.Manager.Contracts.Model.IFModelProperty", "NameIFModelProperty")
                        .WithMany()
                        .HasForeignKey("NameIFModelPropertyId");

                    b.HasOne("IF.Manager.Contracts.Model.IFPageForm", "IFPageForm")
                        .WithMany("IFPageFormItemModelProperties")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFPageGrid", "IFPageGrid")
                        .WithMany("IFPageFormItemModelProperties")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("FK_IFPageControlItemModelProperty_IFPageControl_ObjectId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFModelProperty", "ValueIFModelProperty")
                        .WithMany()
                        .HasForeignKey("ValueIFModelPropertyId");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageControlMap", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFPageControl", "IFPageControl")
                        .WithOne("IFPageControlMap")
                        .HasForeignKey("IF.Manager.Contracts.Model.IFPageControlMap", "IFPageControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFPageControlMap", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageGridLayout", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFPageLayout", "Layout")
                        .WithMany("GridLayouts")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageParameter", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFPage", "IFPage")
                        .WithMany("IFPageParameters")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFPageGrid", "IFPageGrid")
                        .WithMany("IFPageParameters")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("FK_IFPageParameter_IFPageControl_ObjectId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFPageListView", "IFPageListView")
                        .WithMany("IFPageParameters")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("FK_IFPageParameter_IFPageControl_ObjectId2")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFProcess", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFProject", "Project")
                        .WithMany("Processes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFProject", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFSolution", "Solution")
                        .WithMany("Projects")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPublish", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFProcess", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId");

                    b.HasOne("IF.Manager.Contracts.Model.IFSolution", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IF.Manager.Contracts.Model.IFSolution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFQuery", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFModel", "Model")
                        .WithMany("Queries")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFProcess", "Process")
                        .WithMany("Queries")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFQueryFilterItem", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFEntityProperty", "EntityProperty")
                        .WithMany("QueryFilterItems")
                        .HasForeignKey("EntityPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFEntity", null)
                        .WithMany("QueryFilterItems")
                        .HasForeignKey("IFEntityId");

                    b.HasOne("IF.Manager.Contracts.Model.IFPageParameter", "IFPageParameter")
                        .WithMany()
                        .HasForeignKey("IFPageParameterId");

                    b.HasOne("IF.Manager.Contracts.Model.IFQueryFilterItem", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId");

                    b.HasOne("IF.Manager.Contracts.Model.IFQuery", "Query")
                        .WithMany("QueryFilterItems")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFQueryOrder", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFEntityProperty", "EntityProperty")
                        .WithMany("QueryOrders")
                        .HasForeignKey("EntityPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFQuery", "Query")
                        .WithMany("QueryOrders")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IF.Manager.Service.Model.IFClass", b =>
                {
                    b.HasOne("IF.Manager.Service.Model.IFClass", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IF.Manager.Service.Model.IFClassMapper", b =>
                {
                    b.HasOne("IF.Manager.Service.Model.IFClass", "IFClass")
                        .WithMany()
                        .HasForeignKey("IFClassId");

                    b.HasOne("IF.Manager.Contracts.Model.IFModel", "IFModel")
                        .WithMany()
                        .HasForeignKey("IFModelId");
                });

            modelBuilder.Entity("IF.Manager.Service.Model.IFClassMapping", b =>
                {
                    b.HasOne("IF.Manager.Service.Model.IFClass", "FromProperty")
                        .WithMany()
                        .HasForeignKey("FromPropertyId");

                    b.HasOne("IF.Manager.Service.Model.IFClassMapper", "IFClassMapper")
                        .WithMany("IFClassMappings")
                        .HasForeignKey("IFClassMapperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFModelProperty", "ToProperty")
                        .WithMany()
                        .HasForeignKey("ToPropertyId");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPage", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFProject", "IFProject")
                        .WithMany("IFPages")
                        .HasForeignKey("IFProjectId");

                    b.HasOne("IF.Manager.Contracts.Model.IFPageLayout", "PageLayout")
                        .WithMany()
                        .HasForeignKey("PageLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFProcess", "Process")
                        .WithMany("Pages")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageAction", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFCommand", "Command")
                        .WithMany("Actions")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFModel", "IFModel")
                        .WithMany()
                        .HasForeignKey("IFModelId");

                    b.HasOne("IF.Manager.Contracts.Model.IFPageControl", "IFPageControl")
                        .WithMany()
                        .HasForeignKey("IFPageControlId");

                    b.HasOne("IF.Manager.Contracts.Model.IFQuery", "Query")
                        .WithMany("Actions")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageForm", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFPageFormLayout", "FormLayout")
                        .WithMany("PageForms")
                        .HasForeignKey("FormLayoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFModel", "IFModel")
                        .WithMany("PageForms")
                        .HasForeignKey("IFModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFQuery", "IFQuery")
                        .WithMany()
                        .HasForeignKey("IFQueryId");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageGrid", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFPageGridLayout", "GridLayout")
                        .WithMany("PageGrids")
                        .HasForeignKey("GridLayoutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IF.Manager.Contracts.Model.IFPageForm", "IFFilterPageForm")
                        .WithMany()
                        .HasForeignKey("IFFilterPageFormId");

                    b.HasOne("IF.Manager.Contracts.Model.IFQuery", "Query")
                        .WithMany("Grids")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageListView", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFPageFormLayout", "FormLayout")
                        .WithMany()
                        .HasForeignKey("FormLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IF.Manager.Contracts.Model.IFQuery", "IFQuery")
                        .WithMany("ListViews")
                        .HasForeignKey("IFQueryId");
                });

            modelBuilder.Entity("IF.Manager.Contracts.Model.IFPageNavigation", b =>
                {
                    b.HasOne("IF.Manager.Contracts.Model.IFProject", "IFProject")
                        .WithMany()
                        .HasForeignKey("IFProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
